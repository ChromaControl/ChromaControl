name: Release Chroma Control

on:
  release:
    types: [prereleased,released]

jobs:
  app:
    name: Release App
    runs-on: windows-latest
    env:
      ReleaseChannel: ${{ github.event.release.prerelease == true && 'preview' || 'stable' }}
      ReleaseChannelName: "${{ github.event.release.prerelease == true && 'Preview' || 'Stable' }}"
      ReleaseChannelColor: "${{ github.event.release.prerelease == true && '0xffa500' || '0x00ff00' }}"
      ReleaseVersion: ${{ github.event.release.tag_name }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ReleaseVersion }}
          fetch-depth: 1

      - name: Create Release Directory
        run: New-Item -Name 'release' -ItemType directory

      - name: Update Version Info
        run: |
          [xml]$manifest = Get-Content 'src\ChromaControl.Package\Package.appxmanifest'
          $manifest.Package.Identity.Version = '${{ env.ReleaseVersion }}.0'
          $manifest.Save('src\ChromaControl.Package\Package.appxmanifest')
          
          [xml]$manifest = Get-Content 'src\ChromaControl\Package.appxmanifest'
          $manifest.Package.Identity.Version = '${{ env.ReleaseVersion }}.0'
          $manifest.Save('src\ChromaControl\Package.appxmanifest')
          
          $workingFile = Get-Content 'src\ChromaControl\Properties\AssemblyInfo.cs'
          $workingFile -Replace '1.0.0.0', '${{ env.ReleaseVersion }}.0' | Set-Content 'src\ChromaControl\Properties\AssemblyInfo.cs'

      - name: Download Signing Certificate
        run: |
          $certBytes = [System.Convert]::FromBase64String('${{ secrets.SIGNING_CERT }}')
          [IO.File]::WriteAllBytes('src\ChromaControl.Package\ChromaControl.pfx', $certBytes)
          [IO.File]::WriteAllBytes('src\ChromaControl\ChromaControl.pfx', $certBytes)

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Restore Solution
        run: msbuild 'src\ChromaControl.sln' /t:Restore /p:Configuration=Release

      - name: Build App
        run: msbuild 'src\ChromaControl.sln' /p:Configuration=Release /p:AppxBundlePlatforms="x86|x64" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxPackageSigningEnabled=true /p:PackageCertificateKeyFile=ChromaControl.pfx /p:AppxPackageSigningTimestampServerUrl=http://timestamp.sectigo.com/ /p:AppxPackageSigningTimestampDigestAlgorithm=SHA256 /p:Version=${{ env.ReleaseVersion }} /restore

      - name: Remove Signing Certificate
        run: |
          Remove-Item -Path 'src\ChromaControl.Package\ChromaControl.pfx'
          Remove-Item -Path 'src\ChromaControl\ChromaControl.pfx'

      - name: Stage App Files
        run: |
          $buildDir = 'src\ChromaControl.Package\AppPackages'
          $releaseName = 'ChromaControl.Package_${{ env.ReleaseVersion }}.0'

          $appInstaller = Get-Content ($buildDir + '\ChromaControl.Package.appinstaller')
          $appInstaller = $appInstaller -Replace '/stable/ChromaControl.Package.appinstaller', '/${{ env.ReleaseChannel }}/ChromaControl.appinstaller'
          $appInstaller = $appInstaller -Replace ('/stable/' + $releaseName + '_Test/'), '/${{ env.ReleaseVersion }}/'
          $appInstaller = $appInstaller -Replace 'ChromaControl.Package', 'ChromaControl'
          $appInstaller = $appInstaller -Replace '/Dependencies/x86/', '/x86_'
          $appInstaller -Replace '/Dependencies/x64/', '/x64_' | Set-Content 'release\ChromaControl.appinstaller'

          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + $releaseName + '_x86_x64.msixbundle') -Destination 'release\ChromaControl_${{ env.ReleaseVersion }}.0_x86_x64.msixbundle'
          
          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + $releaseName + '_x86_x64.cer') -Destination 'release\ChromaControl_${{ env.ReleaseVersion }}.0_x86_x64.cer'
          
          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + $releaseName + '_x86.appxsym') -Destination 'release\ChromaControl_${{ env.ReleaseVersion }}.0_x86.appxsym'
          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + $releaseName + '_x64.appxsym') -Destination 'release\ChromaControl_${{ env.ReleaseVersion }}.0_x64.appxsym'
          
          Get-ChildItem -Path ($buildDir + '\' + $releaseName + '_Test\' + 'Dependencies\x86') | Rename-Item -NewName { 'x86_' + $_.Name }
          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + 'Dependencies\x86\*.appx') -Destination 'release'
          
          Get-ChildItem -Path ($buildDir + '\' + $releaseName + '_Test\' + 'Dependencies\x64') | Rename-Item -NewName { 'x64_' + $_.Name }
          Move-Item -Path ($buildDir + '\' + $releaseName + '_Test\' + 'Dependencies\x64\*.appx') -Destination 'release'

      - name: Get Previous Release
        id: previous_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
          prerelease: ${{ github.event.release.prerelease }}
          pattern: ^((?!${{ env.ReleaseVersion }}).)*$
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fromTag: ${{ steps.previous_release.outputs.tag_name }}
          toTag: ${{ env.ReleaseVersion }}
          commitMode: true
          configuration: .github/changelog.json

      - name: Upload App
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          prerelease: ${{ github.event.release.prerelease }}
          body: ${{steps.changelog.outputs.changelog}}
          artifacts: release\*.msixbundle,release\*.cer,release\*.appxsym,release\*.appx

      - name: Update Release Channel
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.ReleaseChannel }}
          allowUpdates: true
          prerelease: ${{ github.event.release.prerelease }}
          body: ${{steps.changelog.outputs.changelog}}
          artifacts: release\*.appinstaller

      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nodetail: true
          title: Version ${{ env.ReleaseVersion }} Released To ${{ env.ReleaseChannelName }} Channel
          color: ${{ env.ReleaseChannelColor }}
          description: |
            ${{ env.ReleaseChannelName }} Version `${{ env.ReleaseVersion }}`
            Click [here](https://chromacontrol.github.io/download/${{ env.ReleaseChannel }}) to download!
            Click [here](https://github.com/ChromaControl/ChromaControl/releases/tag/${{ env.ReleaseVersion }}) for the changelog!

  website:
    name: Release Website
    runs-on: ubuntu-latest
    env:
      ReleaseChannel: ${{ github.event.release.prerelease == true && 'preview' || 'stable' }}
      ReleaseVersion: ${{ github.event.release.tag_name }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.ReleaseVersion }}
          fetch-depth: 1

      - name: Create Release Directory
        run: mkdir release

      - name: Build Website
        run: dotnet publish src/ChromaControl.Website/ChromaControl.Website.csproj -c Release -o release --nologo

      - name: Stage Website Files
        run: |
          cp release/wwwroot/index.html release/wwwroot/404.html
          touch release/wwwroot/.nojekyll

      - name: Upload Website
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          token: ${{ secrets.WEBSITE_TOKEN }}
          branch: main
          folder: release/wwwroot
          repository-name: ChromaControl/ChromaControl.github.io
